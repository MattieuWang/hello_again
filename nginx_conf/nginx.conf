
#user  nobody;
worker_processes  1;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;


events {
    worker_connections  1024;
}


http {
    include       mime.types;
    default_type  application/octet-stream;

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    #gzip  on;

    server {
        listen       80;
        server_name  localhost;

        #charset koi8-r;

        #access_log  logs/host.access.log  main;

        location / {
            root   html;
            index  index.html index.htm;
        }

        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }
        
        location /test {
        	default_type text/html;
        	content_by_lua '
        		ngx.say("<p>hello world! 666666 -- saying by lua</p>");
        	';
        }
        
        location /list {
        	default_type text/html;
		content_by_lua '
	    	local mysql = require "resty.mysql"
		local db, err = mysql:new()
		if not db then
		    ngx.say("failed to instantiate mysql: ", err)
		    return
		end

		db:set_timeout(1000) -- 1 sec

		local ok, err, errcode, sqlstate = db:connect{
		    host = "127.0.0.1",
		    port = 3306,
		    database = "ip_database",
		    user = "app",
		    password = "app",
		    charset = "utf8",
		    max_packet_size = 1024 * 1024,
		}

		if not ok then
		    ngx.say("failed to connect: ", err, ": ", errcode, " ", sqlstate)
		    return
		end

		ngx.say("connected to mysql.")

		-- run a select query, expected about 10 rows in
		-- the result set:
		res, err, errcode, sqlstate =
		    db:query("select * from ip_lists", 10)
		if not res then
		    ngx.say("bad result: ", err, ": ", errcode, ": ", sqlstate, ".")
		    return
		end

		local cjson = require "cjson"
		ngx.say("result: ", cjson.encode(res))

		-- put it into the connection pool of size 100,
		-- with 10 seconds max idle timeout
		local ok, err = db:set_keepalive(10000, 100)
		if not ok then
		    ngx.say("failed to set keepalive: ", err)
		    return
		end';
        }
        

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    }


    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    #server {
    #    listen       443 ssl;
    #    server_name  localhost;

    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;

    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}

}
